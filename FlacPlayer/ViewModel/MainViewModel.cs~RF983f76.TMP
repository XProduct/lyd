using GalaSoft.MvvmLight;
using FlacPlayer.Model;
using System.Windows.Input;
using GalaSoft.MvvmLight.Command;
using System.Drawing;
using libZPlay;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;
using System.Collections.ObjectModel;
using System.Timers;
using System.Linq;

namespace FlacPlayer.ViewModel
{
    /// <summary>
    /// This class contains properties that the main View can data bind to.
    /// <para>
    /// See http://www.galasoft.ch/mvvm
    /// </para>
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        #region Constructor

        private readonly IDataService DataService;
        private readonly IPlayer Player;
        private TCallbackFunc PlayNextSongCallback;

        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
        public MainViewModel(IDataService dataService, IPlayer player)
        {
            DataService = dataService;
            Player = player;

            Songs = DataService.GetSongs(@"I:\Music\");

            PauseCommand = new RelayCommand(Pause);
            PlayCommand = new RelayCommand(Play);
            PlayOnDemandCommand = new RelayCommand(PlayOnDemand);
            ToggleShuffleCommand = new RelayCommand(ToggleShuffle);

            // Callbacks for Player
            PlayNextSongCallback = new TCallbackFunc(PlayNextSong);
            Player.SetSongFinishedCallback(PlayNextSongCallback);

            StartSongPositionListener();

            // Load ID3 Tags
            LoadSongID3TagsAsync();
        }

        #endregion

        #region Properties

        /// <summary>
        /// The <see cref="ToggleShuffleCommand" /> property's name.
        /// </summary>
        public const string ToggleShuffleCommandPropertyName = "ToggleShuffleCommand";

        private ICommand _toggleShuffleCommand;

        /// <summary>
        /// Sets and gets the ToggleShuffleCommand property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ICommand ToggleShuffleCommand
        {
            get
            {
                return _toggleShuffleCommand;
            }

            set
            {
                if (_toggleShuffleCommand == value)
                {
                    return;
                }

                RaisePropertyChanging(ToggleShuffleCommandPropertyName);
                _toggleShuffleCommand = value;
                RaisePropertyChanged(ToggleShuffleCommandPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="IsShuffleMode" /> property's name.
        /// </summary>
        public const string IsShuffleModePropertyName = "IsShuffleMode";

        private bool _isShuffleMode = false;

        /// <summary>
        /// Sets and gets the IsShuffleMode property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public bool IsShuffleMode
        {
            get
            {
                return _isShuffleMode;
            }

            set
            {
                if (_isShuffleMode == value)
                {
                    return;
                }

                RaisePropertyChanging(IsShuffleModePropertyName);
                _isShuffleMode = value;
                RaisePropertyChanged(IsShuffleModePropertyName);
            }
        }

        /// <summary>
        /// The <see cref="Duration" /> property's name.
        /// </summary>
        public const string DurationPropertyName = "Duration";

        private string _duration = "0.00";

        /// <summary>
        /// Sets and gets the Duration property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public string Duration
        {
            get
            {
                return _duration;
            }

            set
            {
                if (_duration == value)
                {
                    return;
                }

                RaisePropertyChanging(DurationPropertyName);
                _duration = value;
                RaisePropertyChanged(DurationPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="PercentageComplete" /> property's name.
        /// </summary>
        public const string PercentageCompletePropertyName = "PercentageComplete";

        private double _PercentageComplete = 0;

        /// <summary>
        /// Sets and gets the PercentageComplete property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public double PercentageComplete
        {
            get
            {
                return _PercentageComplete;
            }

            set
            {
                if (_PercentageComplete == value)
                {
                    return;
                }

                RaisePropertyChanging(PercentageCompletePropertyName);
                _PercentageComplete = value;
                RaisePropertyChanged(PercentageCompletePropertyName);
            }
        }

        /// <summary>
        /// The <see cref="ErrorString" /> property's name.
        /// </summary>
        public const string ErrorStringPropertyName = "ErrorString";

        private string _ErrorString;

        /// <summary>
        /// Sets and gets the ErrorString property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public string ErrorString
        {
            get
            {
                return _ErrorString;
            }

            set
            {
                if (_ErrorString == value)
                {
                    return;
                }

                RaisePropertyChanging(ErrorStringPropertyName);
                _ErrorString = value;
                RaisePropertyChanged(ErrorStringPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="CurrentSongIndex" /> property's name.
        /// </summary>
        public const string CurrentSongIndexPropertyName = "CurrentSongIndex";

        private int _CurrentSongIndex;

        /// <summary>
        /// Sets and gets the CurrentSongIndex property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public int CurrentSongIndex
        {
            get
            {
                return _CurrentSongIndex;
            }

            set
            {
                if (_CurrentSongIndex == value)
                {
                    return;
                }

                RaisePropertyChanging(CurrentSongIndexPropertyName);
                _CurrentSongIndex = value;
                RaisePropertyChanged(CurrentSongIndexPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="PlayOnDemandCommand" /> property's name.
        /// </summary>
        public const string PlayOnDemandCommandPropertyName = "PlayOnDemandCommand";

        private ICommand _PlayOnDemandCommand;

        /// <summary>
        /// Sets and gets the PlayOnDemandCommand property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ICommand PlayOnDemandCommand
        {
            get
            {
                return _PlayOnDemandCommand;
            }

            set
            {
                if (_PlayOnDemandCommand == value)
                {
                    return;
                }

                RaisePropertyChanging(PlayOnDemandCommandPropertyName);
                _PlayOnDemandCommand = value;
                RaisePropertyChanged(PlayOnDemandCommandPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="PauseCommand" /> property's name.
        /// </summary>
        public const string PauseCommandPropertyName = "PauseCommand";

        private ICommand _PauseCommand;

        /// <summary>
        /// Sets and gets the PauseCommand property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ICommand PauseCommand
        {
            get
            {
                return _PauseCommand;
            }

            set
            {
                if (_PauseCommand == value)
                {
                    return;
                }

                RaisePropertyChanging(PauseCommandPropertyName);
                _PauseCommand = value;
                RaisePropertyChanged(PauseCommandPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="SelectedSong" /> property's name.
        /// </summary>
        public const string SelectedSongPropertyName = "SelectedSong";

        private Song _SelectedSong;

        /// <summary>
        /// Sets and gets the SelectedSong property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public Song SelectedSong
        {
            get
            {
                return _SelectedSong;
            }

            set
            {
                if (_SelectedSong == value)
                {
                    return;
                }

                RaisePropertyChanging(SelectedSongPropertyName);
                _SelectedSong = value;
                RaisePropertyChanged(SelectedSongPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="Songs" /> property's name.
        /// </summary>
        public const string SongsPropertyName = "Songs";

        private ObservableCollection<Model.Song> _Songs = new ObservableCollection<Song>();

        /// <summary>
        /// Sets and gets the Songs property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ObservableCollection<Model.Song> Songs
        {
            get
            {
                return _Songs;
            }

            set
            {
                if (_Songs == value)
                {
                    return;
                }

                RaisePropertyChanging(SongsPropertyName);
                _Songs = value;
                RaisePropertyChanged(SongsPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="PlayCommand" /> property's name.
        /// </summary>
        public const string PlayCommandPropertyName = "PlayCommand";

        private ICommand _playCommand;

        /// <summary>
        /// Sets and gets the PlayCommand property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ICommand PlayCommand
        {
            get
            {
                return _playCommand;
            }

            set
            {
                if (_playCommand == value)
                {
                    return;
                }

                RaisePropertyChanging(PlayCommandPropertyName);
                _playCommand = value;
                RaisePropertyChanged(PlayCommandPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="CurrentTrackDuration" /> property's name.
        /// </summary>
        public const string CurrentTrackDurationPropertyName = "CurrentTrackDuration";

        private TStreamTime _CurrentTrackDuration;

        /// <summary>
        /// Sets and gets the CurrentTrackDuration property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public TStreamTime CurrentTrackDuration
        {
            get
            {
                return _CurrentTrackDuration;
            }

            set
            {
                RaisePropertyChanging(CurrentTrackDurationPropertyName);
                _CurrentTrackDuration = value;
                RaisePropertyChanged(CurrentTrackDurationPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="CurrentPositionText" /> property's name.
        /// </summary>
        public const string CurrentPositionTextPropertyName = "CurrentPositionText";

        private string _CurrentPositionText;

        /// <summary>
        /// Sets and gets the CurrentPositionText property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public string CurrentPositionText
        {
            get
            {
                return _CurrentPositionText;
            }

            set
            {
                if (_CurrentPositionText == value)
                {
                    return;
                }

                RaisePropertyChanging(CurrentPositionTextPropertyName);
                _CurrentPositionText = value;
                RaisePropertyChanged(CurrentPositionTextPropertyName);
            }
        }

        /// <summary>
        /// The <see cref="CurrentPlayQueue" /> property's name.
        /// </summary>
        public const string CurrentPlayQueuePropertyName = "CurrentPlayQueue";

        private ObservableCollection<Song> _currentPlayQueue = new ObservableCollection<Song>();

        /// <summary>
        /// Sets and gets the CurrentPlayQueue property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ObservableCollection<Song> CurrentPlayQueue
        {
            get
            {
                return _currentPlayQueue;
            }

            set
            {
                if (_currentPlayQueue == value)
                {
                    return;
                }

                RaisePropertyChanging(CurrentPlayQueuePropertyName);
                _currentPlayQueue = value;
                RaisePropertyChanged(CurrentPlayQueuePropertyName);
            }
        }

        #endregion

        #region Methods

        private void Pause()
        {
            Player.Pause();
        }

        private void Play()
        {
            Player.Play();
        }

        private void PlayOnDemand()
        {
            Player.ClearQueue();
            Player.DemandPlay(SelectedSong.Path, HandlePlayerError);
            CurrentSongIndex = 0;
            SelectedSong.IsPlaying = true;
            GetSongDuration();
            AddSongsToQueue();
        }

        private int PlayNextSong(uint objptr, int user_data, TCallbackMessage msg, uint param1, uint param2)
        {
            PercentageComplete = 0;
            Songs[CurrentSongIndex].IsPlaying = false;
            CurrentSongIndex = CurrentSongIndex + 1;
            Songs[CurrentSongIndex].IsPlaying = true;
            GetSongDuration();
            return 0;
        }

        private void GetSongDuration()
        {
            CurrentTrackDuration = Player.GetDuration();
            Duration = CurrentTrackDuration.hms.minute.ToString() + ":" + ((CurrentTrackDuration.hms.second < 10) ? "0" : String.Empty) + CurrentTrackDuration.hms.second.ToString();
        }

        private async Task LoadSongID3TagsAsync()
        {
            await Task.Run(() =>
            {
                foreach (Song song in Songs)
                {
                    TID3Info info = Player.GetID3Tags(song.Path);
                    if (!String.IsNullOrEmpty(info.Title))
                    {
                        song.Title = info.Title;
                    }

                    song.Artist = info.Artist;
                    song.Album = info.Album;
                }
            });
        }

        private async Task AddSongsToQueue()
        {
            await Task.Run(() =>
            {
                CurrentPlayQueue.Clear();

                if (IsShuffleMode)
                {
                    CurrentPlayQueue = new ObservableCollection<Song>(Songs.Shuffle());
                    foreach (Song song in CurrentPlayQueue)
                    {
                        if (song != SelectedSong)
                        {
                            Player.AddFile(song.Path);
                        }
                    }
                }
                else
                {
                    for (var i = (CurrentSongIndex + 1); i < Songs.Count; i++)
                    {
                        Player.AddFile(Songs[i].Path);
                        CurrentPlayQueue.Add(Songs[i]);
                    }
                }

            });
        }

        private void StartSongPositionListener()
        {
            Timer timer = new Timer();
            timer.Interval = 1000;
            timer.Elapsed += timer_Elapsed;
            timer.Enabled = true;
        }

        void timer_Elapsed(object sender, ElapsedEventArgs e)
        {
            TStreamTime time = Player.GetPosition();
            double currentSeconds = (double)time.sec;
            double durationSeconds = (double)CurrentTrackDuration.sec;

            CurrentPositionText = time.hms.minute.ToString() + ":" + ((time.hms.second < 10) ? "0" : String.Empty) + time.hms.second.ToString();

            if (durationSeconds != 0)
            {

                PercentageComplete = ((currentSeconds / CurrentTrackDuration.sec) * 100);
            }
        }

        private void ToggleShuffle()
        {
            IsShuffleMode = !IsShuffleMode;
        }

        public void HandlePlayerError(string error)
        {
            ErrorString = error;
        }

        ////public override void Cleanup()
        ////{
        ////    // Clean up if needed

        ////    base.Cleanup();
        ////}

        #endregion
    }
}